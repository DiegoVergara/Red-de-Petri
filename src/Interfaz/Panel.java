/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaz;
// se importan bibliotecas, métodos y objetos.
import java.awt.BasicStroke;
import static java.awt.Color.blue;
import static java.awt.Color.cyan;
import static java.awt.Color.red;
import static java.awt.Color.white;
import java.awt.Desktop;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.border.BevelBorder;
import objetos.Linea;
import objetos.Transicion;
import objetos.Circulo;
import objetos.circuloEvolucion;
import objetos.Disparos;
import objetos.Nivel;
import objetos.Rama;




/**
 *
 * @author Diego
 */
public class Panel extends javax.swing.JFrame {
    // se inicializan variables
    int circulo = 0;
    int transicion = 0;
    int linea = 0;
    int punto = 0;
    int mover = 0;
    int moveP = 0, indiceP = 0, clickMove = 0;
    int moveT = 0, indiceT = 0;
    int countP = 0, countT = 0, countL = 0, selectp=0, selectT=0;
    int cP = 0, cT = 0, xp=0, yp=0, xt=0, yt=0, xSelectP=-1, ySelectp =-1, xSelectT=-1, ySelectT=-1;
    String peso, etiquetaPlaza, etiquetaTransi, nmarcas, NombrePlazaMove, nombreTransiMove;
    ArrayList<Circulo> c = new ArrayList();
    ArrayList<circuloEvolucion> c2 = new ArrayList();
    ArrayList<Transicion> t = new ArrayList();
    ArrayList<Linea> l = new ArrayList();
    ArrayList<String> taboo = new ArrayList(); 

    int clic =0;
    ArrayList<Disparos> vCaracteristico = new ArrayList(); 
    
    // Se establece el panel principal
    public Panel() {
        initComponents();
        //PanelConFondo pcf= new PanelConFondo("fondo.JPG", 910, 600);
        //jPanel3.add(pcf);
        this.setVisible(true);
        dibujar();
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked") // Código generado
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane2 = new javax.swing.JTabbedPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jToggleButtonPlaza = new javax.swing.JToggleButton();
        jToggleButtonTransi = new javax.swing.JToggleButton();
        jToggleButtonArco = new javax.swing.JToggleButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jToggleButtonMarcas = new javax.swing.JToggleButton();
        jLabel15 = new javax.swing.JLabel();
        jToggleButtonEditar = new javax.swing.JToggleButton();
        jLabel18 = new javax.swing.JLabel();
        jTabbedPane4 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jToggleButtonVEPlazas = new javax.swing.JToggleButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTablePlazas = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jToggleButtonVETransi = new javax.swing.JToggleButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTableTransi = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jToggleButtonVEMatrizPre = new javax.swing.JToggleButton();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTablePre = new javax.swing.JTable();
        jPanel9 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jToggleButtonVEMatrizPost = new javax.swing.JToggleButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTablePost = new javax.swing.JTable();
        jPanel10 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jToggleButtonVEMarcaje = new javax.swing.JToggleButton();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTableMarcaje = new javax.swing.JTable();
        jPanel11 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jToggleButtonVEMatrizC = new javax.swing.JToggleButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTableC = new javax.swing.JTable();
        jPanel14 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableEvo = new javax.swing.JTable();
        jComboBoxDisparo = new javax.swing.JComboBox();
        jButtonDisparo = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableS = new javax.swing.JTable();
        jPanel13 = new javax.swing.JPanel();
        jPanelMA = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextAreaHistorial = new javax.swing.JTextArea();
        jPanel7 = new javax.swing.JPanel();
        jButtonReiniciar = new javax.swing.JButton();
        jButtonManual = new javax.swing.JButton();
        jButtonReq = new javax.swing.JButton();
        jButtonUml = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Red de Petri");
        setResizable(false);
        setSize(new java.awt.Dimension(1030, 600));

        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel3MouseClicked(evt);
            }
        });
        jPanel3.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jPanel3MouseMoved(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 852, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 521, Short.MAX_VALUE)
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setText("Artefactos:");

        jToggleButtonPlaza.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/plaza.png"))); // NOI18N
        jToggleButtonPlaza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonPlazaActionPerformed(evt);
            }
        });

        jToggleButtonTransi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/barra.png"))); // NOI18N
        jToggleButtonTransi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonTransiActionPerformed(evt);
            }
        });

        jToggleButtonArco.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/arrow.png"))); // NOI18N
        jToggleButtonArco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonArcoActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(153, 153, 153));
        jLabel12.setText("Plaza");

        jLabel13.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(153, 153, 153));
        jLabel13.setText("Transición");

        jLabel14.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(153, 153, 153));
        jLabel14.setText("Arco");

        jToggleButtonMarcas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/punto.png"))); // NOI18N
        jToggleButtonMarcas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonMarcasActionPerformed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(153, 153, 153));
        jLabel15.setText("Marcas");

        jToggleButtonEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/editar.png"))); // NOI18N
        jToggleButtonEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonEditarActionPerformed(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(153, 153, 153));
        jLabel18.setText("Editar");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jToggleButtonEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jToggleButtonMarcas, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jToggleButtonArco, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jToggleButtonTransi, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jToggleButtonPlaza, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(19, 19, 19))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addGap(34, 34, 34))))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator2))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addGap(46, 46, 46))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addGap(49, 49, 49))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButtonPlaza, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButtonTransi, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButtonArco, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButtonMarcas, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButtonEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel3.getAccessibleContext().setAccessibleName("");
        jPanel3.getAccessibleContext().setAccessibleDescription("");

        jTabbedPane1.addTab("Modelo", jPanel1);

        jTabbedPane4.setTabPlacement(javax.swing.JTabbedPane.LEFT);

        jLabel6.setForeground(new java.awt.Color(102, 102, 102));
        jLabel6.setText("Plazas: {P1, P2, . . . . . . . ,Pm}");

        jLabel2.setForeground(new java.awt.Color(102, 102, 102));
        jLabel2.setText("Red de Petri: <Plazas, Transiciones, F.Pre, F.Post>");

        jToggleButtonVEPlazas.setText("Ventana Externa");
        jToggleButtonVEPlazas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonVEPlazasActionPerformed(evt);
            }
        });

        jTablePlazas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
            }
        ));
        jTablePlazas.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTablePlazasFocusGained(evt);
            }
        });
        jScrollPane1.setViewportView(jTablePlazas);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 953, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(189, 189, 189)
                        .addComponent(jLabel2)
                        .addGap(57, 57, 57)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(400, 400, 400)
                        .addComponent(jToggleButtonVEPlazas)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 431, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButtonVEPlazas)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane4.addTab("Plazas", jPanel5);

        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setText("Red de Petri: <Plazas, Transiciones, F.Pre, F.Post>");

        jLabel7.setForeground(new java.awt.Color(102, 102, 102));
        jLabel7.setText("Transiciones: {T1, T2, . . . . . . . ,Tn}");

        jToggleButtonVETransi.setText("Ventana Externa");
        jToggleButtonVETransi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonVETransiActionPerformed(evt);
            }
        });

        jTableTransi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTableTransi.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTableTransi.setEditingColumn(1);
        jTableTransi.setEditingRow(1);
        jTableTransi.setFillsViewportHeight(true);
        jTableTransi.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTableTransiFocusGained(evt);
            }
        });
        jScrollPane8.setViewportView(jTableTransi);
        jTableTransi.getAccessibleContext().setAccessibleName("");
        jTableTransi.getAccessibleContext().setAccessibleDescription("");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane8, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(189, 189, 189)
                        .addComponent(jLabel3)
                        .addGap(59, 59, 59)
                        .addComponent(jLabel7))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(400, 400, 400)
                        .addComponent(jToggleButtonVETransi)))
                .addContainerGap(172, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButtonVETransi))
        );

        jTabbedPane4.addTab("Transiciones", jPanel6);

        jLabel4.setForeground(new java.awt.Color(102, 102, 102));
        jLabel4.setText("Red de Petri: <Plazas, Transiciones, F.Pre, F.Post>");

        jLabel8.setForeground(new java.awt.Color(102, 102, 102));
        jLabel8.setText("F.Pre: PxT -> N");

        jToggleButtonVEMatrizPre.setText("Ventana Externa");
        jToggleButtonVEMatrizPre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonVEMatrizPreActionPerformed(evt);
            }
        });

        jTablePre.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTablePre.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTablePreFocusGained(evt);
            }
        });
        jScrollPane10.setViewportView(jTablePre);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane10, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(189, 189, 189)
                        .addComponent(jLabel4)
                        .addGap(113, 113, 113)
                        .addComponent(jLabel8))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(400, 400, 400)
                        .addComponent(jToggleButtonVEMatrizPre)))
                .addContainerGap(241, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButtonVEMatrizPre))
        );

        jTabbedPane4.addTab("F. Pre", jPanel2);

        jLabel5.setForeground(new java.awt.Color(102, 102, 102));
        jLabel5.setText("Red de Petri: <Plazas, Transiciones, F.Pre, F.Post>");

        jLabel9.setForeground(new java.awt.Color(102, 102, 102));
        jLabel9.setText("F.Post: TxP -> N");

        jToggleButtonVEMatrizPost.setText("Ventana Externa");
        jToggleButtonVEMatrizPost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonVEMatrizPostActionPerformed(evt);
            }
        });

        jTablePost.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTablePost.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTablePostFocusGained(evt);
            }
        });
        jScrollPane9.setViewportView(jTablePost);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(189, 189, 189)
                        .addComponent(jLabel5)
                        .addGap(105, 105, 105)
                        .addComponent(jLabel9))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(400, 400, 400)
                        .addComponent(jToggleButtonVEMatrizPost)))
                .addContainerGap(241, Short.MAX_VALUE))
            .addComponent(jScrollPane9, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel9))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButtonVEMatrizPost))
        );

        jTabbedPane4.addTab("F.Post", jPanel9);

        jLabel10.setForeground(new java.awt.Color(102, 102, 102));
        jLabel10.setText("Marcaje: P -> N");

        jToggleButtonVEMarcaje.setText("Ventana Externa");
        jToggleButtonVEMarcaje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonVEMarcajeActionPerformed(evt);
            }
        });

        jTableMarcaje.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTableMarcaje.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTableMarcajeFocusGained(evt);
            }
        });
        jScrollPane11.setViewportView(jTableMarcaje);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(400, 400, 400)
                        .addComponent(jToggleButtonVEMarcaje))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(395, 395, 395)
                        .addComponent(jLabel10)))
                .addContainerGap(408, Short.MAX_VALUE))
            .addComponent(jScrollPane11, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButtonVEMarcaje))
        );

        jTabbedPane4.addTab("Marcaje", jPanel10);

        jLabel11.setForeground(new java.awt.Color(102, 102, 102));
        jLabel11.setText("C: Post - Pre");

        jToggleButtonVEMatrizC.setText("Ventana Externa");
        jToggleButtonVEMatrizC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonVEMatrizCActionPerformed(evt);
            }
        });

        jTableC.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTableC.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTableCFocusGained(evt);
            }
        });
        jScrollPane7.setViewportView(jTableC);

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGap(400, 400, 400)
                        .addComponent(jToggleButtonVEMatrizC))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGap(396, 396, 396)
                        .addComponent(jLabel11)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButtonVEMatrizC))
        );

        jTabbedPane4.addTab("C", jPanel11);

        jTabbedPane1.addTab("Representaciones", jTabbedPane4);

        jPanel14.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jPanel14MouseMoved(evt);
            }
        });

        jPanel15.setBackground(new java.awt.Color(255, 255, 255));
        jPanel15.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel15.setPreferredSize(new java.awt.Dimension(846, 2));
        jPanel15.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jPanel15MouseMoved(evt);
            }
        });

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 853, Short.MAX_VALUE)
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jTableEvo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTableEvo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTableEvoMousePressed(evt);
            }
        });
        jTableEvo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTableEvoFocusGained(evt);
            }
        });
        jScrollPane2.setViewportView(jTableEvo);

        jComboBoxDisparo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxDisparo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDisparoActionPerformed(evt);
            }
        });

        jButtonDisparo.setText("Disparo");
        jButtonDisparo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDisparoActionPerformed(evt);
            }
        });

        jLabel16.setText("Disparo a");

        jTableS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTableS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTableSMousePressed(evt);
            }
        });
        jScrollPane3.setViewportView(jTableS);

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, 855, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxDisparo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonDisparo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel14Layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel16)
                        .addGap(41, 41, 41))))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxDisparo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonDisparo)
                .addContainerGap())
            .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, 526, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Evolución", jPanel14);

        jPanel13.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jPanel13FocusGained(evt);
            }
        });

        jPanelMA.setBackground(new java.awt.Color(255, 255, 255));
        jPanelMA.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jPanelMAMouseMoved(evt);
            }
        });

        javax.swing.GroupLayout jPanelMALayout = new javax.swing.GroupLayout(jPanelMA);
        jPanelMA.setLayout(jPanelMALayout);
        jPanelMALayout.setHorizontalGroup(
            jPanelMALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 725, Short.MAX_VALUE)
        );
        jPanelMALayout.setVerticalGroup(
            jPanelMALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 521, Short.MAX_VALUE)
        );

        jTextAreaHistorial.setEditable(false);
        jTextAreaHistorial.setColumns(20);
        jTextAreaHistorial.setRows(5);
        jTextAreaHistorial.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextAreaHistorialFocusGained(evt);
            }
        });
        jScrollPane5.setViewportView(jTextAreaHistorial);

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 999, Short.MAX_VALUE)
            .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel13Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanelMA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(268, Short.MAX_VALUE)))
            .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                    .addGap(0, 735, Short.MAX_VALUE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 526, Short.MAX_VALUE)
            .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel13Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanelMA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
            .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel13Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        jTabbedPane1.addTab("Grafo de M.A", jPanel13);

        jButtonReiniciar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/reiniciar.png"))); // NOI18N
        jButtonReiniciar.setText("    Borrar Modelo");
        jButtonReiniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReiniciarActionPerformed(evt);
            }
        });

        jButtonManual.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/manual.png"))); // NOI18N
        jButtonManual.setText("Manual de Usuario");
        jButtonManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonManualActionPerformed(evt);
            }
        });

        jButtonReq.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/manual.png"))); // NOI18N
        jButtonReq.setText("Doc. Requerimientos");
        jButtonReq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReqActionPerformed(evt);
            }
        });

        jButtonUml.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/manual.png"))); // NOI18N
        jButtonUml.setText("           Esp. UML      ");
        jButtonUml.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUmlActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addGap(131, 131, 131)
                .addComponent(jButtonReq)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 378, Short.MAX_VALUE)
                .addComponent(jButtonUml, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(127, 127, 127))
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(399, 399, 399)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonManual, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonReiniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jButtonReiniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                .addComponent(jButtonManual, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonReq, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonUml, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(142, 142, 142))
        );

        jTabbedPane1.addTab("Ayuda", jPanel7);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1020, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 572, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    
    // Eventos para los artefactos del software
    
    
    //Eventos que muetran las distintas matrices en ventanas externas.
    private void jToggleButtonVEPlazasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonVEPlazasActionPerformed
        Plazas p = new Plazas(c, null, 1); 
    }//GEN-LAST:event_jToggleButtonVEPlazasActionPerformed

    private void jToggleButtonVETransiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonVETransiActionPerformed
        Transiciones tr = new Transiciones(t, null, 1); 
    }//GEN-LAST:event_jToggleButtonVETransiActionPerformed

    private void jToggleButtonVEMatrizPreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonVEMatrizPreActionPerformed
        MatrizPre mp = new MatrizPre(c,t,l, null, 1); 
    }//GEN-LAST:event_jToggleButtonVEMatrizPreActionPerformed

    private void jToggleButtonVEMatrizPostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonVEMatrizPostActionPerformed
        MatrizPost mp = new MatrizPost(c,t,l,null,1); 
    }//GEN-LAST:event_jToggleButtonVEMatrizPostActionPerformed

    private void jToggleButtonVEMatrizCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonVEMatrizCActionPerformed
        MatrizC mc = new MatrizC(c,t,l, null,1); 
    }//GEN-LAST:event_jToggleButtonVEMatrizCActionPerformed

    private void jToggleButtonVEMarcajeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonVEMarcajeActionPerformed
        Marcaje mje = new Marcaje(c, null, 1);
    }//GEN-LAST:event_jToggleButtonVEMarcajeActionPerformed
    

     // Eventos de los botones Plaza y transición (Artefactos del modelo)
    private void jToggleButtonPlazaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonPlazaActionPerformed
        circulo = 1;
        transicion = 0;
        linea = 0;
        punto = 0;
        mover = 0;
        xSelectP = -1; ySelectp = -1; xSelectT = -1; ySelectT=-1;//seteamos las variables para que no hayan p ni t seleccionadas
        selectT = 0; selectp = 0;
        dibujar();
    }//GEN-LAST:event_jToggleButtonPlazaActionPerformed

    private void jToggleButtonTransiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonTransiActionPerformed
        circulo = 0;
        transicion = 1;
        linea = 0;
        punto = 0;
        mover = 0;
        xSelectP = -1; ySelectp = -1; xSelectT = -1; ySelectT=-1;//seteamos las variables para que no hayan p ni t seleccionadas
        selectT = 0; selectp = 0;
        dibujar();
    }//GEN-LAST:event_jToggleButtonTransiActionPerformed

    // Evento que captura el clic del mouse en el panel
    private void jPanel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MouseClicked
        int x = evt.getX();
        int y = evt.getY();
        // Se inician los graficos
        Graphics g = jPanel3.getGraphics();
        Graphics g2 = jPanel3.getGraphics();
        Graphics g3 = jPanel3.getGraphics();
        //para darle opciones gráficas como el grosor de la línea 
        Graphics2D g2d = (Graphics2D)g;
        g2d.setStroke(new BasicStroke(2));
        int error = 0, error2 = 0;
        if(circulo == 1){ // Si el artefato es Plaza
            for (int i = 0; i < c.size(); i++) {
                if(x >= (c.get(i).getX()-40) && x <= (c.get(i).getX()+30)
                        && y >= (c.get(i).getY()-30) && y <=(c.get(i).getY()+30)){//evaluamos el rango de coordenadas para ver si ya existe una plaza
                    int dialogButton = JOptionPane.showConfirmDialog(null,"Esta Plaza ya existe\n ¿desea eliminarla?");

                            if(dialogButton == JOptionPane.YES_OPTION){
                                eliminaArcos(c.get(i).getEtiqueta());//llamamos a la funcion que elimina los arcos relacionados a esta plaza
                                c.remove(i);//borramos la plaza
                                c2.remove(i);
                                jPanel3.update(g);
                                this.dibujar();//
                            }else{

                                  //remove(dialogButton);

                            }
                    error++;
                }
            }
            if(error == 0){
                countP++;
                
                //g.fillOval(x, y, linea, error);
                g2.setColor(white);
                g.drawOval((x-15), (y-15), 30, 30);//dibujamos la plaza
                g2.fillOval((x-15), (y-15), 30, 30);//pintamos la plaza blanco
                g.drawString("P"+countP, (x-30), y);//escribimos el nombre de la plaza
                Circulo cirObj = new Circulo(x,y,"P"+countP,0);//creamos el objeto
                circuloEvolucion cirObjEv = new circuloEvolucion(x,y,"P"+countP);//creamos el objeto para la evolucion
                c.add(cirObj);//añadimos la plaza al arraylist
                c2.add(cirObjEv);
                dibujar();//dibujamos para actualizar la interfaz
            }
            
        }
        
        if(mover == 1){ // Si el artefato es Plaza
            for (int i = 0; i < c.size(); i++) {
                if(x >= (c.get(i).getX()-40) && x <= (c.get(i).getX()+30)
                        && y >= (c.get(i).getY()-30) && y <=(c.get(i).getY()+30)){
                    if(clickMove == 0){
                        indiceP = i; moveP = 1; clickMove = 1; NombrePlazaMove = c.get(i).getEtiqueta();
                        xp = c.get(i).getX(); yp = c.get(i).getY();//entrego coordenadas seleccionadas a xp e yp
                        selectp = 1; xSelectP=xp; ySelectp=yp;
                        dibujar();
                    }else{
                        if(clickMove == 1){
                            indiceP = 0; moveP = 0; clickMove = 0;
                            selectp = 0; xSelectP = -1; ySelectp = -1;
                            dibujar();
                        }
                    }
                }
            }
            for (int i = 0; i < t.size(); i++) {
                if(x >= (t.get(i).getX()-40) && x <= (t.get(i).getX()+50)
                        && y >= (t.get(i).getY()-20) && y <=(t.get(i).getY()+20)){
                    if(clickMove == 0){
                        indiceT = i; moveT = 1; clickMove = 1; nombreTransiMove = t.get(i).getEtiqueta();
                        xt = t.get(i).getX(); yt = t.get(i).getY();//entrego coordenadas seleccionadas a xp e yp
                        selectT = 1; xSelectT = xt; ySelectT = yt;//entrego coordenadas para cambiar color a la transicion seleccionada
                        dibujar();
                    }else{
                        if(clickMove == 1){
                            indiceT = 0; moveT = 0; clickMove = 0;
                            selectT = 0; xSelectT = -1; ySelectT = -1;
                            dibujar();
                        }
                    }
                }
            }
        }
        
        if(transicion == 1){// Si el artefato es Transición
            for (int i = 0; i < t.size(); i++) {
                if(x >= (t.get(i).getX()-40) && x <= (t.get(i).getX()+50)
                        && y >= (t.get(i).getY()-20) && y <=(t.get(i).getY()+20)){//evaluamos el rango de coordenadas por si ya hay una transicion
                    int dialogButton = JOptionPane.showConfirmDialog(null, "Esta Transicion ya existe\n ¿desea eliminarla?");
                            if(dialogButton == JOptionPane.YES_OPTION){
                                eliminaArcos(t.get(i).getEtiqueta());//llamamos la funcion que elimina los arcos relacionados a la transicion eliminada
                                t.remove(i);//eliminamos la transicion del arraylist
                                jPanel3.update(g);
                                this.dibujar();//dibujamos para actualizar la interfaz
                            }else{
                                  //remove(dialogButton);
                            }
                    error++;//si no eliminamos la transicion esta variable aumenta para después no dibujar una transicion nueva
                }
            }
            if(error == 0){//si error=0 no hay transicion y se puede agregar una transicion nueva
                countT++;//se aumenta este contador para determinar el orden del arco si counT es mayor que counP entonces el arco parte de una transicion
                Transicion trans = new Transicion(x, y, "T"+countT);//se crea el objeto de la transicion
                t.add(trans);//añadimos la transicion al arraylist
                dibujar();//dibujamos para actualizar la interfaz
            }
        }
        if(linea == 1){// Si el artefato es Arco
            if(error == 0){//si el error es 0 no hay arco y podemos dibujar un arco nuevo
                countL++;
                for (int i = 0; i < c.size(); i++) {//recorro las plazas existentes
                    if(x >= (c.get(i).getX()-25) && x <= (c.get(i).getX()+25)
                        && y >= (c.get(i).getY()-25) && y <=(c.get(i).getY()+25)){//verifico que la seleccion corresponda a una plaza
                        if(cP > 0){//verifico que no se haya seleccionado antes una plaza
                            JOptionPane.showMessageDialog(null, "Ya hay una Plaza seleccionada", "Atención" ,JOptionPane.WARNING_MESSAGE);
                        }else{
                            xp = c.get(i).getX(); yp = c.get(i).getY();//entrego coordenadas seleccionadas a xp e yp
                            selectp = 1; xSelectP=xp; ySelectp=yp;//entregamos coordenadas para pintar la plaza seleccionada
                            dibujar();//actualizamos la interfaz para ver el color de la plaza seleccionada
                            if(cT>0){//para determinar si va de t a p, o de p a t
                                cP = 1;
                            }else{
                                cP = 2;
                            }
                            etiquetaPlaza = c.get(i).getEtiqueta();
                        }
                    }
                }
                for (int i = 0; i < t.size(); i++) {//recorro las transiciones existentes
                    if(x >= (t.get(i).getX()-15) && x <= (t.get(i).getX()+50)
                        && y >= (t.get(i).getY()-10) && y <=(t.get(i).getY()+10)){//verifico que la seleccion corresponda a una plaza
                        if(cT > 0){//verifico que no se haya seleccionado antes una plaza
                            JOptionPane.showMessageDialog(null, "Ya hay una Transicion seleccionada", "Atención" ,JOptionPane.WARNING_MESSAGE);
                        }else{
                            xt = t.get(i).getX(); yt = t.get(i).getY();//entrego coordenadas seleccionadas a xp e yp
                            selectT = 1; xSelectT = xt; ySelectT = yt;//entrego coordenadas para cambiar color a la transicion seleccionada
                            dibujar();//sctualizamos la interfaz para que cambie el color
                            if(cP>0){//para determinar si va de t a p, o de p a t
                                cT = 1;
                            }else{
                                cT = 2;
                            }
                            etiquetaTransi = t.get(i).getEtiqueta();//le damos el nombre a la transicion
                        }
                    }
                }
                
                if(cP>0 && cT>0){//verificamos que este una transicion y una plaza seleccionada
                    for (int i = 0; i < l.size(); i++) {//recorremos los arcos
                            if(cT > cP){//si va primero la transicion
                                if((xt==l.get(i).getX1() && xp==l.get(i).getX2() && yt==l.get(i).getY1() && yp==l.get(i).getY2())){//evaluamos las coordenadas
                                    int dialogButton = JOptionPane.showConfirmDialog(null, "Este arco ya existe\n ¿desea eliminarla?");

                                    if(dialogButton == JOptionPane.YES_OPTION){
                                        l.remove(i);//eliminamos el arco
                                        jPanel3.update(g);
                                        this.dibujar();//acyualizamos el panel
                                        xSelectP = -1; ySelectp = -1; xSelectT = -1; ySelectT=-1;//volvemos a los valores iniciales para que no aparezcan seleccionadas
                                        selectT = 0; selectp = 0;//las transiciones y plazas ya no estan pintadas como seleccionadas
                                    }else{
                                        xSelectP = -1; ySelectp = -1; xSelectT = -1; ySelectT=-1;//volvemos a los valores iniciales para que no aparezcan seleccionadas
                                        selectT = 0; selectp = 0;//las transiciones y plazas ya no estan pintadas como seleccionadas
                                        dibujar();
                                      }
                                    error2++;//si no borramos el arco aumentamos esta variable para despues no crear uno nuevo
                                }
                            }else{
                                if((xp==l.get(i).getX1() && xt==l.get(i).getX2() && yp==l.get(i).getY1() && yt==l.get(i).getY2())){//verificamos que el arco exista pero en el otro orden

                                    int dialogButton = JOptionPane.showConfirmDialog(null, "Este arco ya existe\n ¿desea eliminarla?");
                                    if(dialogButton == JOptionPane.YES_OPTION){
                                        l.remove(i);//eliminamos el arco del arraylist
                                        jPanel3.update(g);//actualizamos la interfaz
                                        this.dibujar();
                                        xSelectP = -1; ySelectp = -1; xSelectT = -1; ySelectT=-1;//volvemos las variables al valor inicial para dejar de pintar alguna plaza o transicion como seleccionada
                                        selectT = 0; selectp = 0;//ya no se pintaran las transiciones o plazas como seleccionadas
                                    }else{
                                          //remove(dialogButton);
                                      }
                                    error2++;//aumentamos esta variable si no se borra el arco para luego no crear uno nuevo
                                }
                        }

                    }
                }

                if(error2 == 0){//si error2=0 quiere decir que se puede crear un arco nuevo
                    if(cT > cP && cP >0 && cT >0){// verifico que ya hay una linea y una plaza seleccionada y se ve que el arco vaya de transicion a plaza

                        String auxiliarpeso=null;
                        auxiliarpeso = JOptionPane.showInputDialog(null, "Ingrese el peso del Arco");//ingresamos el peso del arco
                        if(esNumero(auxiliarpeso)){
                            if(Integer.parseInt(auxiliarpeso)>0){ // verifica que el arco sea positivo
                                int peso=Integer.parseInt(auxiliarpeso);
                                Linea line = new Linea(xt,yt,xp,yp,peso, "t", "p", etiquetaTransi, etiquetaPlaza);//creamos un objeto arco
                                l.add(line);//añadimos un arco nuevo al araylist
                                xSelectP = -1; ySelectp = -1; xSelectT = -1; ySelectT=-1;//seteamos las variables para que no aparezca nada seleccionado
                                selectT = 0; selectp = 0;
                                dibujar();//acyualizamos la interfaz
                                cT=0;cP=0;//ya no hay ni una transicion ni una plaza seleccionada
                            }
                            else{//restriccion para que el peso sea mayor que cero
                                JOptionPane.showMessageDialog(null, "El peso debe ser mayor que cero", "Error", JOptionPane.ERROR_MESSAGE);
                                cP=0;
                                cT=0;
                            }
                        }
                        else if(auxiliarpeso == null){
                                
                            }
                        else{
                            JOptionPane.showMessageDialog(null, "El ingreso debe ser numérico", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                        
                    }else{
                        if(cP > cT && cP >0 && cT >0){//se ve que el arco vaya de plaza a transicion
                            String auxiliarpeso2=null;
                            auxiliarpeso2 = JOptionPane.showInputDialog(null, "Ingrese el peso del Arco");
                            if(esNumero(auxiliarpeso2)){
                                if(Integer.parseInt(auxiliarpeso2)>0){ // Verifica que el arco sea positivo
                                    int peso= Integer.parseInt(auxiliarpeso2);
                                    Linea line = new Linea(xp,yp,xt,yt,peso, "p", "t", etiquetaPlaza, etiquetaTransi);//creamos el objeto arco
                                    l.add(line);//añadimos el arco nuevo al arraylist
                                    xSelectP = -1; ySelectp = -1; xSelectT = -1; ySelectT=-1;//seteamos las variables para que no hayan p ni t seleccionadas
                                    selectT = 0; selectp = 0;
                                    dibujar();//actualizamos interfaz
                                    cT=0;cP=0;
                                }
                                else{
                                    JOptionPane.showMessageDialog(null, "El peso debe ser mayor que cero", "Error", JOptionPane.ERROR_MESSAGE);
                                     cP=0;
                                     cT=0;
                                }
                            }
                            else if(auxiliarpeso2== null){
                                
                            }
                            else{
                                 JOptionPane.showMessageDialog(null, "El ingreso debe ser numérico", "Error", JOptionPane.ERROR_MESSAGE);
                            }
                            
                        }
                    }
                }else{
                    cP = 0; cT = 0;//yano hay ni plaza ni transicion seleccionada
                    error = 0;//ya se puede ingresar un arco nuevo
                }
                
            }
        }
        if(punto == 1){// Si el artefato es Marcas
            for (int i = 0; i < c.size(); i++) {
                if(x >= (c.get(i).getX()-15) && x <= (c.get(i).getX()+15)
                        && y >= (c.get(i).getY()-15) && y <=(c.get(i).getY()+15)){

                    String auxiliar0 = null;
                    auxiliar0  = JOptionPane.showInputDialog(null, "Ingrese el Nº de Marcas");
                    if(Integer.parseInt(auxiliar0)>=0){ // verifica que el nº de marcas sea positivo
                        c.get(i).setNMarcas(Integer.parseInt(auxiliar0));//actualizamos las marcas
                        c2.get(i).setNMarcas(Integer.parseInt(auxiliar0));
                        error++;
                        dibujar();//actualizamos la interfaz
                    }
                    else{
                        JOptionPane.showMessageDialog(null, "El ingreso debe ser numérico", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    

                }
            }
        }
    }//GEN-LAST:event_jPanel3MouseClicked
    
    private void moverPlaza(int indice, int x, int y, String n){
        c.get(indice).setX(x);
        c.get(indice).setY(y);
        c2.get(indice).setX(x);
        c2.get(indice).setY(y);
        xSelectP = x;
        ySelectp = y;
        int i, largo = l.size();
        for(i=0; i<largo; i++){//recorremos los arcos
            if(l.get(i).getNombre2().equals(n)){//verificamos que el arco esté relacionado con alguna plaza o transicion eliminada
                l.get(i).setX2(x);
                l.get(i).setY2(y);
            }else{
                if(l.get(i).getNombre1().equals(n)){
                    l.get(i).setX1(x);
                    l.get(i).setY1(y);
                }
            }
        }
    }
    
    private void moverTransicion(int indice, int x, int y, String n){
        t.get(indice).setX(x);
        t.get(indice).setY(y);
        xSelectT = x;
        ySelectT = y;
        int i, largo = l.size();
        for(i=0; i<largo; i++){//recorremos los arcos
            if(l.get(i).getNombre2().equals(n)){//verificamos que el arco esté relacionado con alguna plaza o transicion eliminada
                l.get(i).setX2(x);
                l.get(i).setY2(y);
            }else{
                if(l.get(i).getNombre1().equals(n)){
                    l.get(i).setX1(x);
                    l.get(i).setY1(y);
                }
            }
        }
    }
    
    // Eventos de los botones Plaza y transición (Artefactos del modelo)
    private void jToggleButtonArcoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonArcoActionPerformed
// se inicializan las variables para que no queden almacenadas las coordenadas en caso de equivocación

        cP = 0;
        cT = 0;
        xp=0;
        yp=0;
        xt=0;
        yt=0;
        circulo = 0;
        transicion = 0;
        linea = 1;
        punto = 0;
        mover = 0;
        xSelectP = -1; ySelectp = -1; xSelectT = -1; ySelectT=-1;//seteamos las variables para que no hayan p ni t seleccionadas
        selectT = 0; selectp = 0;
        dibujar();
    }//GEN-LAST:event_jToggleButtonArcoActionPerformed
//si presionamos el boton de marca deja el punto en 1 y los demas en 0
    private void jToggleButtonMarcasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonMarcasActionPerformed
        circulo = 0;
        transicion = 0;
        mover = 0;
        linea = 0;
        punto = 1;
        xSelectP = -1; ySelectp = -1; xSelectT = -1; ySelectT=-1;//seteamos las variables para que no hayan p ni t seleccionadas
        selectT = 0; selectp = 0;
        dibujar();
    }//GEN-LAST:event_jToggleButtonMarcasActionPerformed
// Evento para dibujar el modelo al mover el mouse en el panel principal
    private void jPanel3MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MouseMoved
        int x = evt.getX();
        int y = evt.getY();
        if(moveP == 1){
            moverPlaza(indiceP, x, y, NombrePlazaMove);
        }
        if(moveT == 1){
            moverTransicion(indiceT, x, y, nombreTransiMove);
        }
        dibujar();
    }//GEN-LAST:event_jPanel3MouseMoved
// Evento para mostrar la tabla pre al activar el foco sobre ella
    private void jTablePreFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTablePreFocusGained
        MatrizPre mp = new MatrizPre(c,t,l, jTablePre, 0);
    }//GEN-LAST:event_jTablePreFocusGained
   // Evento de botón disparo apr arealizar las evoluciones
    private void jButtonDisparoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDisparoActionPerformed
            for(Disparos dis: vCaracteristico){ // se toman los disparos anteriores y se les suma un nuevo disparo correspondiente a la 
                                                //  transición escogida en combobox
                if (dis.getTransicion().equals(jComboBoxDisparo.getSelectedItem())){
                    int ndisp = dis.getDisparos(); // rescata el numero de disparos
                    dis.setDisparos(ndisp+1);// aumenta en uno el numero de disparos
                }
             }
            disparo(c2,t,l);// LLama al método para realizar el disparo
            MatrizS ms = new MatrizS(vCaracteristico, jTableS, 0); // una vez realizado el disparo imprime la tabla del vector característico
            jComboBoxDisparo.removeAllItems(); // limpia el combobox
            sensibilizada(c2); // llena el combobox con las transiciones sensibilizadas
//          disparo2();  
              
    }//GEN-LAST:event_jButtonDisparoActionPerformed

    private void jComboBoxDisparoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDisparoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxDisparoActionPerformed
// Evento para dibujar la evolución al mover el mouse en el panel de evolución
    private void jPanel15MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel15MouseMoved
        dibujaEvolucion();
    }//GEN-LAST:event_jPanel15MouseMoved
// Evento para mostrar la tabla de representación al activar el foco sobre ellas
    private void jTablePostFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTablePostFocusGained
        MatrizPost mp = new MatrizPost(c,t,l,jTablePost,0);
    }//GEN-LAST:event_jTablePostFocusGained

    private void jTablePlazasFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTablePlazasFocusGained
        Plazas p = new Plazas(c, jTablePlazas, 0);
    }//GEN-LAST:event_jTablePlazasFocusGained

    private void jTableTransiFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTableTransiFocusGained
        Transiciones tr = new Transiciones(t, jTableTransi, 0);
    }//GEN-LAST:event_jTableTransiFocusGained

    private void jTableMarcajeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTableMarcajeFocusGained
        Marcaje mje = new Marcaje(c, jTableMarcaje, 0);
    }//GEN-LAST:event_jTableMarcajeFocusGained

    private void jTableCFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTableCFocusGained
        MatrizC mc = new MatrizC(c,t,l, jTableC,0);
    }//GEN-LAST:event_jTableCFocusGained

    private void jPanel13FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPanel13FocusGained
//        matrizMarcas();
    }//GEN-LAST:event_jPanel13FocusGained

// Evento para el botón reiniciar que borra todo el modelo
    private void jButtonReiniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReiniciarActionPerformed
        inicializar();
    }//GEN-LAST:event_jButtonReiniciarActionPerformed



    private void jButtonManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonManualActionPerformed
                 try {
            File path = new File (getClass().getResource("/Pdf/Manual.pdf").toURI());
            Desktop.getDesktop().open(path);
       }catch (IOException ex) {
            ex.printStackTrace();
        }catch (URISyntaxException ex) {
            Logger.getLogger(Panel.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jButtonManualActionPerformed


    
    // Evento para bloquear el botón disparo cuando no hayan transiciones que disparar (combobox vacío)
    private void jPanel14MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel14MouseMoved
        if (jComboBoxDisparo.getSelectedItem()== null){ // combobox vacío
            jButtonDisparo.setEnabled(false);
        }
        else{
            jButtonDisparo.setEnabled(true);
        }
    }//GEN-LAST:event_jPanel14MouseMoved

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        reiniciaEvolución();// se copia el Circulo en circuloEvolucion
        clic =0; // bandera para mostrar el aviso de verificación de modelo
        // limpiamos y seteamos en cero todo.
        vCaracteristico.clear(); // se limpia el vector característico
        MarcajeEvo mje = new MarcajeEvo(c2, jTableEvo, 0); // Se imprime tabla marcaje sin evolucionar
        MatrizS ms = new MatrizS(vCaracteristico, jTableS, 0);// Se imprime vector característico sin evolucionar y vacio
        jComboBoxDisparo.removeAllItems(); // se limpia el combobox
        if(verificarModelo() && verificarModelo2()){ // si el modelo está bien, llena el combobox con las transiciones sensibilizadas
            sensibilizada(c2);
        }
    }//GEN-LAST:event_jTabbedPane1StateChanged
// Evento para inicializar desde cero la evolución cuando la tabla de marcajeEvo tenga foco
    private void jTableEvoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTableEvoFocusGained
        jComboBoxDisparo.removeAllItems(); // remueve todos los elementos del combobox
        MarcajeEvo mje = new MarcajeEvo(c2, jTableEvo, 0);// Se imprime tabla marcaje sin evolucionar
        // se limpia el vetor caracteristico y se llena con valores cero
        vCaracteristico.clear();
        for(Transicion tran: t){
            Disparos vC = new Disparos(tran.getEtiqueta(), 0);
            vCaracteristico.add(vC);
        }
        MatrizS ms = new MatrizS(vCaracteristico, jTableS, 0); // Se imprime vector característico sin evolucionar
        if(!verificarModelo() || !verificarModelo2() && clic==0){ // se verifica que el modelo este bien conectado y que no haya mostrado el mensaje al tomar el foco
            // imprime mensaje y bloquea el botón disparo
            JOptionPane.showMessageDialog(jPanel14, "El Modelo tiene conexiones inválidas", "Atención", JOptionPane.WARNING_MESSAGE);
            jButtonDisparo.setEnabled(false);
        }
        // si el modelo es correcto verifica si las transiciones están sensibilizadas y llena el combobox
        if(verificarModelo() && verificarModelo2()){
            sensibilizada(c2);
        }
        clic =1; // bandera para no mostrar el mensaje al tomar el foco
    }//GEN-LAST:event_jTableEvoFocusGained
//Eventos mostrar las tablas de evolución en ventanas externas al presionarlas
    private void jTableEvoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableEvoMousePressed
        MarcajeEvo mje = new MarcajeEvo(c2, null, 1);
        clic =1;
    }//GEN-LAST:event_jTableEvoMousePressed

    private void jTableSMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableSMousePressed
        MatrizS ms = new MatrizS(vCaracteristico, null, 1);
        clic =1;
    }//GEN-LAST:event_jTableSMousePressed

    private void jToggleButtonEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonEditarActionPerformed
        circulo = 0;
        transicion = 0;
        mover = 1;
        linea = 0;
        punto = 0;
        xSelectP = -1; ySelectp = -1; xSelectT = -1; ySelectT=-1;//seteamos las variables para que no hayan p ni t seleccionadas
        selectT = 0; selectp = 0;
        dibujar();
    }//GEN-LAST:event_jToggleButtonEditarActionPerformed

    private void jPanel12MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel12MouseMoved
            //WIlson
        //matrizMarcas();
    }//GEN-LAST:event_jPanel12MouseMoved

    private void jButtonReqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReqActionPerformed
        try {
            File path = new File (getClass().getResource("/Pdf/Requisitos.pdf").toURI());
            Desktop.getDesktop().open(path);
       }catch (IOException ex) {
            ex.printStackTrace();
        }catch (URISyntaxException ex) {
            Logger.getLogger(Panel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButtonReqActionPerformed

    private void jButtonUmlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUmlActionPerformed
        try {
            File path = new File (getClass().getResource("/Pdf/UMLCompleto.pdf").toURI());
            Desktop.getDesktop().open(path);
       }catch (IOException ex) {
            ex.printStackTrace();
        }catch (URISyntaxException ex) {
            Logger.getLogger(Panel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButtonUmlActionPerformed

    private void jTextAreaHistorialFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextAreaHistorialFocusGained
        
        
        if(verificarModelo() && verificarModelo2()){
            matrizMarcas();
        }
        else if (!(verificarModelo() && verificarModelo2()) && clic==0){
            JOptionPane.showMessageDialog(jPanel14, "El Modelo tiene conexiones inválidas", "Atención", JOptionPane.WARNING_MESSAGE);
        }
        clic =1;
    }//GEN-LAST:event_jTextAreaHistorialFocusGained

    private void jPanelMAMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelMAMouseMoved
        //ETIQUETA
        
        
        if(verificarModelo() && verificarModelo2()){
            matrizMarcas();
        }
    }//GEN-LAST:event_jPanelMAMouseMoved

    
    // Función principal
    public static void main(String[] args){
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Panel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                    Logger.getLogger(Panel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(Panel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(Panel.class.getName()).log(Level.SEVERE, null, ex);
                }
                new Panel().setVisible(true);
            }
        });     
    }
// Método inicializar para borrar todo e iniciar de cero
private void inicializar(){
    // Limpia botones artefactos
    circulo = 0;
    transicion = 0;
    linea = 0;
    punto = 0;
    // Limpia coordenadas
    countP = 0;
    countT = 0;
    countL = 0;
    cP = 0;
    cT = 0;
    xp=0;
    yp=0;
    xt=0;
    yt=0;
    String peso, etiquetaPlaza, etiquetaTransi, nmarcas;
    // Limpia objetos
    c.clear();
    c2.clear();
    t.clear();
    l.clear();
    vCaracteristico.clear();
    // limpia bandera
    clic=0;
    xSelectP = -1; ySelectp = -1; xSelectT = -1; ySelectT=-1;//seteamos las variables para que no hayan p ni t seleccionadas
    selectT = 0; selectp = 0;
    dibujar();
    }    
    
    public void drawArrow2(int x0,int y0,int x1,int y1){        
        Graphics g5 = jPanel2.getGraphics();
        Graphics2D g2d = (Graphics2D)g5;
        
        g2d.setStroke(new BasicStroke(2));
        
        
        g5.setColor(blue);

        double alfa=Math.atan2(y1-y0,x1-x0);
        g5.drawLine(x0,y0,x1,y1);
        int k=10;
        int xa=(int)(x1-k*Math.cos(alfa+1));
        int ya=(int)(y1-k*Math.sin(alfa+1));
        // Se dibuja un extremo de la dirección de la flecha.
        g5.drawLine(xa,ya,x1,y1); 
        xa=(int)(x1-k*Math.cos(alfa-1));
        ya=(int)(y1-k*Math.sin(alfa-1));
        // Se dibuja el otro extremo de la dirección de la flecha.
        g5.drawLine(xa,ya,x1,y1);  

    }    

// Método para dibujar el gorro del arco
public void drawArrow(int x0,int y0,int x1,int y1, String orden){
        Graphics g4 = jPanel3.getGraphics();
        Graphics g5 = jPanel3.getGraphics();
        Graphics2D g2d = (Graphics2D)g5;
        Graphics2D g3d = (Graphics2D)g4;
        g2d.setStroke(new BasicStroke(2));
        g3d.setStroke(new BasicStroke(2));
        g4.setColor(red);
        g5.setColor(blue);
        if(orden.equals("p")){
            double alfa=Math.atan2(y1-y0,x1-x0);
            g5.drawLine(x0,y0,x1,y1);
            int k=10;
            int xa=(int)(x1-k*Math.cos(alfa+1));
            int ya=(int)(y1-k*Math.sin(alfa+1));
            // Se dibuja un extremo de la dirección de la flecha.
            g5.drawLine(xa,ya,x1,y1); 
            xa=(int)(x1-k*Math.cos(alfa-1));
            ya=(int)(y1-k*Math.sin(alfa-1));
            // Se dibuja el otro extremo de la dirección de la flecha.
            g5.drawLine(xa,ya,x1,y1);  
        }else{
            double alfa=Math.atan2(y1-y0,x1-x0);
            g4.drawLine(x0,y0,x1,y1);
            int k=10;
            int xa=(int)(x1-k*Math.cos(alfa+1));
            int ya=(int)(y1-k*Math.sin(alfa+1));
            // Se dibuja un extremo de la dirección de la flecha.
            g4.drawLine(xa,ya,x1,y1); 
            xa=(int)(x1-k*Math.cos(alfa-1));
            ya=(int)(y1-k*Math.sin(alfa-1));
            // Se dibuja el otro extremo de la dirección de la flecha.
            g4.drawLine(xa,ya,x1,y1);
        }


    }   

    public void drawArrow2(int x0,int y0,int x1,int y1, String etiqueta){        
        Graphics g5 = jPanel2.getGraphics();
        Graphics2D g2d = (Graphics2D)g5;
        
        g2d.setStroke(new BasicStroke(2));                
        g5.setColor(blue);
        int xm = (x1+x0)/2;
        int ym = (y1+y0)/2;
        
        

        double alfa=Math.atan2(y1-y0,x1-x0);
        g5.drawLine(x0,y0,x1,y1);
        int k=10;
        int xa=(int)(x1-k*Math.cos(alfa+1));
        int ya=(int)(y1-k*Math.sin(alfa+1));
        
        // Se dibuja un extremo de la dirección de la flecha.
        g5.drawLine(xa,ya,x1,y1); 
        xa=(int)(x1-k*Math.cos(alfa-1));
        ya=(int)(y1-k*Math.sin(alfa-1));
        // Se dibuja el otro extremo de la dirección de la flecha.
        g5.drawLine(xa,ya,x1,y1);
        
        
                
        g5.drawString(etiqueta, xm, ym);
    } 
// Método para dibujar el modelo en el panel principal
private void dibujar(){
    //iniciamos los objetos graficos
        Graphics g2 = jPanel3.getGraphics();//pintara de color blanco las plazas
        Graphics g3 = jPanel3.getGraphics();
        g2.setColor(white);//para pintar las plazas blancas
        Graphics g = jPanel3.getGraphics();//para las etiquetas
        if(moveP==1 || moveT == 1){
            //jPanel3.update(g);
            g2.fillRect(1, 1, 852, 521);
        }
        g3.setColor(cyan);//g3 pintara las plazas seleccionadas de color cyan
        //Graphics g4 = jPanel3.getGraphics();

        Graphics2D g2d = (Graphics2D)g;
        g2d.setStroke(new BasicStroke(3));
        //recorremos el arraylist de las plazas para dibujar todas las almacenadas
        for (int i = 0; i < c.size(); i++) {
            g.drawOval(((c.get(i).getX())-15), ((c.get(i).getY())-15), 30, 30);//para dibujar el contorno de una plaza
            if(selectp==1 && xSelectP == c.get(i).getX() && ySelectp == c.get(i).getY()){//evaluamos si hay una plaza seleccionada que se pinte de color cyan
               g3.fillOval(((c.get(i).getX())-15), ((c.get(i).getY())-15), 30, 30); 
            }else{//si no esta seleccionado pintamos de color blanco
               g2.fillOval(((c.get(i).getX())-15), ((c.get(i).getY())-15), 30, 30);
            }
            g.drawString(c.get(i).getEtiqueta(), ((c.get(i).getX())-30), (c.get(i).getY()));//escribimos las etiquetas de cada plaza al lado
            Font f2 = g.getFont();//cambiamos la fuente 
            Font f = new Font(f2.getFontName(), Font.PLAIN, 10);
            g.setFont(f);
            g.drawString(Integer.toString(c.get(i).getNMarcas()), ((c.get(i).getX())-10), (c.get(i).getY())+5);//escribimos las marcas dentro de las plazas
            g.setFont(f2);
        }
        for (int i = 0; i < t.size(); i++) {//recorremos las transiciones
            if(selectT==1 && xSelectT==t.get(i).getX() && ySelectT==t.get(i).getY()){//si esta seleccionada la pintamos de color cyan
                g3.drawLine((t.get(i).getX()), t.get(i).getY(), ((t.get(i).getX())+35), t.get(i).getY());
            }else{//si no está seleccionada la pintamos negra
                g.drawLine((t.get(i).getX()), t.get(i).getY(), ((t.get(i).getX())+35), t.get(i).getY());
            }
            g.drawString(t.get(i).getEtiqueta(), (t.get(i).getX())-15, t.get(i).getY());//escribimos la etiqueta de la transicion
           
        }
        for (int i = 0; i < l.size(); i++) {//recorremos los arcos

            if(l.get(i).getOrden1().equals("p")){//verificamos si empieza en plaza para dibujar la flecha al final
                drawArrow(l.get(i).getX1()-15, l.get(i).getY1(), l.get(i).getX2()+17, l.get(i).getY2(), l.get(i).getOrden1());//dibujamos la flecha en la coordenada de la transicion
                g.drawString(Integer.toString(l.get(i).getPeso()), (((l.get(i).getX1())+(l.get(i).getX2()))/2)-10, 
                (((l.get(i).getY1())+(l.get(i).getY2()))/2)+15);//escribimos la etiqueta 
            }else{//el arco empieza en la transicion
                drawArrow(l.get(i).getX1()+17, l.get(i).getY1(), l.get(i).getX2()+15, l.get(i).getY2(), l.get(i).getOrden1());//dibujamos la flecha en la plaza
                g.drawString(Integer.toString(l.get(i).getPeso()), (((l.get(i).getX1())+(l.get(i).getX2()))/2)+25, 
                (((l.get(i).getY1())+(l.get(i).getY2()))/2)+15);//escribimos la etiqueta
            }
        }
}
// Método para dibujar el modelo y su evolución en el panel de evolución
private void dibujaEvolucion(){
    //esta función hace lo mismo que la función dibujar
        Graphics g = jPanel15.getGraphics();
        Graphics g2 = jPanel15.getGraphics();
        Graphics2D g2d = (Graphics2D)g;
        g2d.setStroke(new BasicStroke(3));
        
        for (int i = 0; i < c2.size(); i++) {//recorremos la plaza y la dibujamos
            g2.setColor(white);
            g.drawOval(((c2.get(i).getX())-15), ((c2.get(i).getY())-15), 30, 30);
            g2.fillOval(((c2.get(i).getX())-15), ((c2.get(i).getY())-15), 30, 30);
            g.drawString(c2.get(i).getEtiqueta(), ((c2.get(i).getX())-30), (c2.get(i).getY()));
            Font f2 = g.getFont();
            Font f = new Font(f2.getFontName(), Font.PLAIN, 10);
            g.setFont(f);
            g.drawString(Integer.toString(c2.get(i).getNMarcas()), ((c2.get(i).getX())-10), (c2.get(i).getY())+5);
            g.setFont(f2);
        }
        for (int i = 0; i < t.size(); i++) {//recorremos las transiciones y las dibujamos
            g.drawLine((t.get(i).getX()), t.get(i).getY(), ((t.get(i).getX())+35), t.get(i).getY());
            g.drawString(t.get(i).getEtiqueta(), (t.get(i).getX())-15, t.get(i).getY());
           
        }
        for (int i = 0; i < l.size(); i++) {

            if(l.get(i).getOrden1().equals("p")){//recorremos los arcos y los dibujamos
                drawArrow(l.get(i).getX1()-15, l.get(i).getY1(), l.get(i).getX2()+17, l.get(i).getY2(), l.get(i).getOrden1());
                g.drawString(Integer.toString(l.get(i).getPeso()), (((l.get(i).getX1())+(l.get(i).getX2()))/2)-10, 
                (((l.get(i).getY1())+(l.get(i).getY2()))/2)+15);
            }else{
                drawArrow(l.get(i).getX1()+17, l.get(i).getY1(), l.get(i).getX2()+15, l.get(i).getY2(), l.get(i).getOrden1());
                g.drawString(Integer.toString(l.get(i).getPeso()), (((l.get(i).getX1())+(l.get(i).getX2()))/2)+25, 
                (((l.get(i).getY1())+(l.get(i).getY2()))/2)+15);
            }
        }

}
//Método para eliminar arcos
private void eliminaArcos( String c){
    int i, largo = l.size();
    for(i=0; i<largo; i++){//recorremos los arcos
        if(l.get(i).getNombre1().equals(c) || l.get(i).getNombre2().equals(c)){//verificamos que el arco esté relacionado con alguna plaza o transicion eliminada
            l.remove(i);//eliminamos el arco relacionado con la transicion o plaza eliminada
            i--;//volvemos a revisar esa posicion ya que el que estaba aquí fue eliminado
            largo--;//al eliminar un arco el largo del arraylist disminuye una unidad
        }
    }
}
//Método para ver las transiciones sensibilizadas y llenar el combobox en evolución
private void sensibilizada(ArrayList<circuloEvolucion> circ){
    // Se limpia el combobox e inicializan estructuras a utilizar
    jComboBoxDisparo.removeAllItems();  
    int [][] pre = new int[t.size()][circ.size()];
    int [] marcaje = new int[circ.size()];
    int ind=0;
    
    for (circuloEvolucion c : circ) { // se recorren las plazas y se almacenan las marcas en un vector
        marcaje[ind]= c.getNMarcas();
        ind ++;
    }
    for (int i =0; i<pre.length;i++){ // se inicializa la matriz pre en cero
        for (int j=0; j<pre[i].length; j++){
            pre[i][j]=0;
        }
    }
    
    for(Linea lin: l){ // se recorren los arcos
        if(lin.getOrden1().equals("p") && lin.getOrden2().equals("t")){ // si es pre se almacena el peso en las coordenadas correspondientes
            int j=indiceCir(lin.getNombre1()); // se busca el incice de la plaza
            int i=indiceTran(lin.getNombre2()); // se busca el indice de la transicion
            pre[i][j] = lin.getPeso(); // se almacena el peso
        }
    }
    
    for(int i =0; i< pre.length; i++){ // se recorre la matriz pre por columnas y se compara con el marcaje
        int count =0;
        for (int j=0; j< pre[i].length; j++){
            if(marcaje[j]>= pre[i][j]){ // si es mayor el marcaje de la transicion al peso correspondiente de la matriz pre aumenta count
                count++;               
            }
        }
        if(count==(pre[i].length)){    // si todos los marcajes de las plazas son mayor a los pesos de la matriz pre correspondiente       
            jComboBoxDisparo.addItem(t.get(i).getEtiqueta()); // se almacena la transicion conrrespondiente al indice de la matriz pre
        }
    }   
}


// Método apra obtener el índice de las plazas
public int indiceCir(String objetivo ){
    int ind =0;
    for(Circulo cir:c){ // se recorren las plazas y obtiene el indice correspondiente a la plaza objetivo
        if(cir.getEtiqueta().equals(objetivo)){
            return ind;
        }
        ind ++;
    }
    return ind;
}
//Método para obtener el ínidce de las transiciones 
public int indiceTran(String objetivo ){
    int ind =0;
    for(Transicion tran: t){// se recorren las transiciones y obtiene el indice correspondiente a la transiciónn objetivo
        if(tran.getEtiqueta().equals(objetivo)){
            return ind;
        }
        ind ++;
    }
    return ind;
}

// Método para verificar la validez del modelo
public boolean verificarModelo(){
    int count;
    if(l!=null){// si existen arcos
        for(Circulo cir: c){ // se recorren las plazas
            count=0;
            for(Linea lin: l){ // para todos los arcos y una plaza x
                if (lin.getNombre1().equals(cir.getEtiqueta()) || lin.getNombre2().equals(cir.getEtiqueta())){
                    count++; // si en el arco hay una plaza, contador aumenta
                }
            }
            if (count==0){ // si no existe la plaza anexada a un arco 
                return false; // modelo inválido
            }
        }
        for(Transicion tran: t){// se recorren las transiciones
            count=0;
            for(Linea lin: l){ // para todos los arcos y una transición x
                if (lin.getNombre1().equals(tran.getEtiqueta()) || lin.getNombre2().equals(tran.getEtiqueta())){
                    count++; // si en el arco hay una transición, contador aumenta
                }
            }
            if (count==0){  // si no existe la transicón anexada a un arco           
                return false; // modelo inválido
            } 
        }
        
        return true; // si estan conectados, modelo válido
    }
    else{
        return false; // si no hay arcos, modelo inválido
    }
}

public boolean verificarModelo2(){
    
    int [][] pre = new int[t.size()][c.size()];
    int [][] post = new int[t.size()][c.size()];

    for (int i =0; i<pre.length;i++){ // se inicializa la matriz pre en cero
        for (int j=0; j<pre[i].length; j++){
            pre[i][j]=0;
        }
    }
    for (int i =0; i<post.length;i++){ // se inicializa la matriz pre en cero
        for (int j=0; j<pre[i].length; j++){
            pre[i][j]=0;
        }
    }
    
    for(Linea lin: l){ // se recorren los arcos
        if(lin.getOrden1().equals("p") && lin.getOrden2().equals("t")){ // si es pre se almacena el peso en las coordenadas correspondientes
            int j=indiceCir(lin.getNombre1()); // se busca el incice de la plaza
            int i=indiceTran(lin.getNombre2()); // se busca el indice de la transicion
            pre[i][j] = lin.getPeso(); // se almacena el peso
        }
    }
    for(Linea lin: l){ // se recorren los arcos
        if(lin.getOrden1().equals("t") && lin.getOrden2().equals("p")){ // si es post se almacena el peso en las coordenadas correspondientes
            int j=indiceCir(lin.getNombre2()); // se busca el incice de la plaza
            int i=indiceTran(lin.getNombre1()); // se busca el indice de la transicion
            post[i][j] = lin.getPeso(); // se almacena el peso
        }
    }
    
    for(int i =0; i< pre.length; i++){ // se recorre la matriz pre por columnas y se compara con el marcaje
        int ceros =0;
        for (int j=0; j< pre[i].length; j++){
            if(pre[i][j] == 0){
                ceros++;
            }
        }
        if(ceros == (pre[i].length)){
            return false;
        }
    }
    for(int i =0; i< post.length; i++){ // se recorre la matriz post por columnas y se compara con el marcaje
        int ceros =0;
        for (int j=0; j< post[i].length; j++){
            if(post[i][j] == 0){
                ceros++;
            }
        }
        if(ceros == (post[i].length)){
            return false;
        }
    }
    
    return true;
}

// Método para retornar si un string es un numero o no
public boolean esNumero(String numero){
    try
    {
      int n = Integer.parseInt(numero);
    }
    catch(NumberFormatException nfe) // si no es numero
    {
      return false;
    }
    return true;
}
// Método apra reiniciar la evolución
    private void reiniciaEvolución(){
        int i, marcaCirculo;
        for(i=0; i<c.size(); i++){ // para todas las plazas
            marcaCirculo = c.get(i).getNMarcas(); // la marca de la plaza i en la evolción, es igual a la del modelo
            c2.get(i).setNMarcas(marcaCirculo);
        }
    }

// Método de Disparo con ecuacion fundamental.
public void disparo(ArrayList<circuloEvolucion> circulo2 , ArrayList<Transicion> transicion, ArrayList<Linea> linea){
   
    if ( jComboBoxDisparo.getSelectedItem() != null ){ // mientras haya seleccionada una transición de 
        // Se almacen la transición seleccionada e inicializan los vectores a utilizar
        String transicionDisparo = (String)jComboBoxDisparo.getSelectedItem(); 
        int [] vCaracteristicas = new int[transicion.size()];
        int indice = indiceTran(transicionDisparo);
        vCaracteristicas[indice] = 1; // // se almacena la transición seleccionada en el vector de transiciones

        indice =0;
        int [] marcaje = new int[circulo2.size()];
        for(circuloEvolucion cir: circulo2){ // crea el vector de marcajes
            marcaje[indice] = (int)cir.getNMarcas();
            indice++;
        }
        indice =0;
        int[][] matrizPre = new int[circulo2.size()][transicion.size()];
        for(int j=0; j<circulo2.size();j++){ // inicializa la matriz pre en cero
            for(int i=0; i<transicion.size();i++){
                matrizPre[j][i]=0;
            }
        }
        int[][] matrizPost = new int[circulo2.size()][transicion.size()];
        for(int j=0; j<circulo2.size();j++){ // inicializa la matriz post en cero
            for(int i=0; i<transicion.size();i++){
                matrizPost[j][i]=0;
            }
        }
        for (circuloEvolucion c: circulo2){ // Llena la matriz pre y post con sus respectivos pesos
            int j= indiceCir(c.getEtiqueta());
            if(linea!=null){
                for(Linea l: linea){ // para todas los arcos
                    if(l.getOrden1().equals("t") && l.getOrden2().equals("p")){ // si es post
                        if (l.getNombre2().equals(c.getEtiqueta())){ // para la pbaza X
                            int i = indiceTran(l.getNombre1()); // obtiene el índice de la trnasición
                            matrizPost[j][i] = l.getPeso(); // almacena el peso
                        }                          
                    }
                    else if(l.getOrden1().equals("p") && l.getOrden2().equals("t")){ // si es pre
                        if (l.getNombre1().equals(c.getEtiqueta())){// para la plaza x
                            int i = indiceTran(l.getNombre2()); // obtiene el índice de la transición
                            matrizPre[j][i] = l.getPeso(); // almacena el peso
                        }
                    } 
                }
             }
        }   
        // se inicializan los vectores que almacenan la multiplicación de la matriz pre y post con el vector de transición
        int [] matrizPre2 = new int[circulo2.size()];
        int [] matrizPost2 = new int[circulo2.size()];
        // se multiplica la matriz pre con el vector de transición
        for (int x=0; x < matrizPre.length; x++) {
                for (int z=0; z<matrizPre[x].length; z++) {
                        matrizPre2[x] += matrizPre[x][z]*vCaracteristicas[z]; 
               }
        }
        // se multiplica la matriz post con el vector de transición
        for (int x=0; x < matrizPost.length; x++) {
                for (int z=0; z<matrizPost[x].length; z++) {
                        matrizPost2[x] += matrizPost[x][z]*vCaracteristicas[z]; 
               }
        }
        int i=0, valor=0;
        for (circuloEvolucion c: circulo2){ // para cada plaza en la evolución
            valor = marcaje[i] + matrizPost2[i] - matrizPre2[i]; /// ecuación fundamental M1=M0-Post+Pre
            c.setNMarcas(valor); // se almacena
            i++;
        } 
        dibujaEvolucion(); // llama al método que dibuja la evolución
        MarcajeEvo mje = new MarcajeEvo(c2, jTableEvo, 0); // se realiza en nuevo marcaje correspondiente al disparo y nueva evolución
        sensibilizada(c2); // se llama a sensibilizada para llenar el combobox nuevamente
    }
       
}


// Disparo con sumas y Restas
    private void disparo2(){
        
          if (jComboBoxDisparo.getSelectedItem()!= null){
              buscaPlaza(""+jComboBoxDisparo.getSelectedItem());
          }
    }
    
    private void buscaPlaza(String transi){//busca las plazas vinculadas a alguna transicion que se dispare
        int i, peso;
        String plaza;
        for(i=0; i<l.size();i++){//recorremos los arcos
            if(l.get(i).getNombre1().equals(transi)){//verificamos que el arco salga de la transicion 
                plaza = l.get(i).getNombre2();//asignamos valores a las variables
                peso = l.get(i).getPeso();
                sumarPlaza(peso, plaza);//llamamos la función para sumar el peso del arco a la marca 
                dibujaEvolucion();//actualizamos la interfaz
                sensibilizada(c2);//verificamos la sensibilización 
                MarcajeEvo mje = new MarcajeEvo(c2, jTableEvo, 0);
            }else{
                if(l.get(i).getNombre2().equals(transi)){//verificamos que el arco salga de una plaza
                    plaza = l.get(i).getNombre1();//asignamos valores a las variables
                    peso = l.get(i).getPeso();
                    restarPlaza(peso, plaza);//llamamos la función que resta el peso a una marca
                    dibujaEvolucion();//actualizamos la interfaz
                    sensibilizada(c2);
                    MarcajeEvo mje = new MarcajeEvo(c2, jTableEvo, 0);
                }
            }
        }
    }
    
    private void sumarPlaza(int peso, String plaza){//función que suma el peso a la marca de la plaza
        int i, marca;
        for(i=0; i<c2.size(); i++){//recorremos las plazas de la evolución
            if(c2.get(i).getEtiqueta().equals(plaza)){//verificamos que la plaza a cambiar sea la que necesitamos
                marca = c2.get(i).getNMarcas();//obtenemos la marca actual de la plaza
                c2.get(i).setNMarcas(marca+peso);//le sumamos el peso
            }
        }
    }
    
    private void restarPlaza(int peso, String plaza){//función que resta el peso a la marca de la plaza
        int i, marca, resultado;
        for(i=0; i<c2.size(); i++){//recorremos las plazas de la evolución
            if(c2.get(i).getEtiqueta().equals(plaza)){//verificamos que la plaza sea la que necesitamos
                marca = c2.get(i).getNMarcas();//obtenemos la marca de la plaza
                resultado = marca - peso;//restamos el peso a la marca
                c2.get(i).setNMarcas(resultado);//actualizamos la plaza con su nueva marca
            }
        }
    }
    
    private void matrizMarcas(){
        jTextAreaHistorial.setText(null);
        taboo.clear();
        int [] MPadre = new int[c.size()];                                
        
        if (l.isEmpty()){
//            JOptionPane.showMessageDialog(rootPane, "Error, Transiciones vacias");            
        }
        else{   
            
            for (int k = 0; k<c.size(); k++){
                MPadre[k] = c.get(k).getNMarcas();            
            }
            
            Graphics g = jPanel2.getGraphics();
            int alto = jPanelMA.size().height;
            int  largo = jPanelMA.size().width;
            int paso = 50; 
            g.drawString(GetString(MPadre), (largo/2), paso);
            
            taboo.add(GetString(MPadre));
            Recorrido2(MPadre, 2, g, largo/2, paso, 10);
 
        }
    }
        
    private int [] Recorrido2(int[] M, int prof, Graphics g, int xp, int paso, int maxlevel){      
        if (maxlevel>0){
            Nivel n = GetNivel(M);
            int numHijos = n.GetSize();

            if (numHijos==0){                                
                return null;
            } else{
                for (int i = 0; i<numHijos; i++){                                                  
                    String trans = n.getNivel().get(i).getTransicion();
                    String Hijo = GetString(n.getNivel().get(i).getHijo()); 
                    int x = xp; 
                    int margen = 10;
                    if (numHijos%2==0){
                        if ((i+1)<=numHijos/2){
                            x = xp - paso*(i+1); 
                        }else{
                            x = xp + paso*((i+1)-numHijos/2);            
                        }                    
                    }else {
                        if (i<numHijos/2){
                            x = xp -paso*i;
                        }
                        if (i>numHijos/2){
                            x = xp +paso*(i-(numHijos/2+1));
                        }                
                    }
                    drawArrow2(xp, paso*(prof-1), x, paso*prof, trans);                   
                    g.drawString(Hijo, x, paso*prof);  
                    
                    boolean flag = true;
                    jTextAreaHistorial.setText("Transicion: "+n.getNivel().get(i).getTransicion() + "\n" + jTextAreaHistorial.getText());
                    jTextAreaHistorial.setText("Padre: "+GetString(M) + "\n" + jTextAreaHistorial.getText());
                    jTextAreaHistorial.setText("Hijo: "+GetString(n.getNivel().get(i).getHijo()) + "\n" + jTextAreaHistorial.getText());
                    jTextAreaHistorial.setText("------------------------------" + "\n" + jTextAreaHistorial.getText());

                    
                    for (int k = 0; k<taboo.size(); k++){  
                        if (taboo.get(k).compareTo(Hijo)==0){ 
                            flag = false;
                        }
                    }
                    if (flag){ 
                        if (GetString(M).compareTo(GetString(n.getNivel().get(i).getHijo()))!=0){ 
                            taboo.add(Hijo);
                            Recorrido2(n.getNivel().get(i).getHijo(), prof+1, g, x, 50, maxlevel-1);                   
                        }
                    } else {
                        return null;
                    }                      
                    
                }
            }
        } else {
            g.drawString("...", jPanelMA.getSize().width/2, jPanelMA.getSize().height - 50);        
            jTextAreaHistorial.setText("------------------------------" + "\n" + jTextAreaHistorial.getText());
            jTextAreaHistorial.setText("Maximo de recursiones sobrepasado" + "\n" + jTextAreaHistorial.getText());
            
            return null;
            
        }
        
        return null;
    }
    
    private String GetString(int[] M){    
        String MVec = "[";
        for(int i = 0; i<M.length-1; i++){
            MVec+=M[i]+", ";        
        }
        MVec+=M[M.length-1]+"]";
                
        return MVec;        
    }
        
        
    
    private Nivel GetNivel(int [] M){        
        ArrayList<Linea> LP = new ArrayList();
        ArrayList<Linea> LT = new ArrayList();        
        ArrayList<Linea> [] L = new ArrayList[2];        
        Nivel n = new Nivel();  
        
        
                
        for (int i = 0; i<t.size(); i++){
                L = GetLPLT(t.get(i));
                LP = L[0];
                LT = L[1];
                
                if (lanzable(LP, M)){
                                                       
                    int [] MHijo = lanzar(LP, LT, M.clone());  

                    Rama r = new Rama(c.size());            
            
                    r.setPadre(M);                    
                    r.setHijo(MHijo);
                    r.setTransicion(t.get(i).getEtiqueta());
                    n.addNivel(r);                                        
                }
                LP.clear();
                LT.clear();                            
        }
        return n;
    }

    private ArrayList<Linea> [] GetLPLT(Transicion t){        
        ArrayList<Linea> [] L = new ArrayList[2];
        ArrayList<Linea> LP = new ArrayList();
        ArrayList<Linea> LT = new ArrayList();        
                
        for (int k=0; k<l.size(); k++){

            if (l.get(k).getNombre1().compareTo(t.getEtiqueta())==0){                
                LT.add(l.get(k));                        
            }
            else{
                if (l.get(k).getNombre2().compareTo(t.getEtiqueta())==0){                                                
                    LP.add(l.get(k));
                }
            }
        }
       
        L[0] = LP;
        L[1] = LT;
        
        return L;        
    }    
    
    private boolean lanzable(ArrayList<Linea> LP, int [] M){
        boolean flag = true;
        
        for (int k=0; k<LP.size(); k++){
                    String pi = LP.get(k).getNombre1();
                    int index = Integer.parseInt(pi.subSequence(pi.length()-1, pi.length()).toString()) - 1;
                    if (M[index]<LP.get(k).getPeso()){
                        flag = false;                    
                    }
                }
                
        return flag;
    }
    
    private int [] lanzar(ArrayList<Linea> LP, ArrayList<Linea> LT, int [] M){

        for (int k=0; k<LP.size(); k++){
            String pi = LP.get(k).getNombre1();
            int index = Integer.parseInt(pi.subSequence(pi.length()-1, pi.length()).toString()) - 1;
            M[index] = M[index] - LP.get(k).getPeso();                                    
        }
        for (int k=0; k<LT.size(); k++){
            String pi = LT.get(k).getNombre2();
            int index = Integer.parseInt(pi.subSequence(pi.length()-1, pi.length()).toString()) - 1;
            M[index] = M[index] + LT.get(k).getPeso();  
        }
        return M;
    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDisparo;
    private javax.swing.JButton jButtonManual;
    private javax.swing.JButton jButtonReiniciar;
    private javax.swing.JButton jButtonReq;
    private javax.swing.JButton jButtonUml;
    private javax.swing.JComboBox jComboBoxDisparo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPanel jPanelMA;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane4;
    private javax.swing.JTable jTableC;
    private javax.swing.JTable jTableEvo;
    private javax.swing.JTable jTableMarcaje;
    public javax.swing.JTable jTablePlazas;
    private javax.swing.JTable jTablePost;
    private javax.swing.JTable jTablePre;
    private javax.swing.JTable jTableS;
    private javax.swing.JTable jTableTransi;
    private javax.swing.JTextArea jTextAreaHistorial;
    private javax.swing.JToggleButton jToggleButtonArco;
    private javax.swing.JToggleButton jToggleButtonEditar;
    private javax.swing.JToggleButton jToggleButtonMarcas;
    private javax.swing.JToggleButton jToggleButtonPlaza;
    private javax.swing.JToggleButton jToggleButtonTransi;
    private javax.swing.JToggleButton jToggleButtonVEMarcaje;
    private javax.swing.JToggleButton jToggleButtonVEMatrizC;
    private javax.swing.JToggleButton jToggleButtonVEMatrizPost;
    private javax.swing.JToggleButton jToggleButtonVEMatrizPre;
    private javax.swing.JToggleButton jToggleButtonVEPlazas;
    private javax.swing.JToggleButton jToggleButtonVETransi;
    // End of variables declaration//GEN-END:variables
}
